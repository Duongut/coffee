@model CafeApp.Core.Entities.Product

@{
    ViewData["Title"] = Model.Name;
}

<div class="container my-4">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a asp-action="Index" asp-controller="Home">Home</a></li>
            <li class="breadcrumb-item"><a asp-action="Index">Menu</a></li>
            <li class="breadcrumb-item active" aria-current="page">@Model.Name</li>
        </ol>
    </nav>

    <div class="row">
        <div class="col-lg-6">
            <div class="card border-0 shadow-sm">
                <div class="card-body p-0">
                    @if (!string.IsNullOrEmpty(Model.ImageUrl))
                    {
                        <img src="@Model.ImageUrl" alt="@Model.Name" class="img-fluid rounded" style="width: 100%; height: 400px; object-fit: cover;">
                    }
                    else
                    {
                        <div class="d-flex align-items-center justify-content-center bg-light rounded" style="height: 400px;">
                            <div class="text-center text-muted">
                                <i class="bi bi-image" style="font-size: 4rem;"></i>
                                <p class="mt-2">No image available</p>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
        
        <div class="col-lg-6">
            <div class="h-100 d-flex flex-column">
                <div class="mb-3">
                    <span class="badge bg-primary mb-2">@Model.Category?.Name</span>
                    <h1 class="display-6 fw-bold">@Model.Name</h1>
                    
                    @if (!string.IsNullOrEmpty(Model.Description))
                    {
                        <p class="lead text-muted">@Model.Description</p>
                    }
                </div>

                <div class="mb-3">
                    <div class="d-flex flex-wrap gap-2">
                        @if (!string.IsNullOrEmpty(Model.Size))
                        {
                            <span class="badge bg-info">
                                <i class="bi bi-rulers"></i> @Model.Size
                            </span>
                        }
                        @if (!string.IsNullOrEmpty(Model.Temperature))
                        {
                            <span class="badge bg-warning">
                                <i class="bi bi-thermometer-half"></i> @Model.Temperature
                            </span>
                        }
                        @if (Model.IsFeatured)
                        {
                            <span class="badge bg-success">
                                <i class="bi bi-star-fill"></i> Featured
                            </span>
                        }
                    </div>
                </div>

                <div class="mb-4">
                    <div class="d-flex align-items-center">
                        <span class="display-5 fw-bold text-primary me-3">
                            $@Model.Price.ToString("F2")
                        </span>
                        @if (Model.IsAvailable)
                        {
                            <span class="badge bg-success">
                                <i class="bi bi-check-circle"></i> Available
                            </span>
                        }
                        else
                        {
                            <span class="badge bg-danger">
                                <i class="bi bi-x-circle"></i> Out of Stock
                            </span>
                        }
                    </div>
                </div>

                @if (Model.IsAvailable)
                {
                    <div class="mt-auto">
                        <div class="card border-primary">
                            <div class="card-body">
                                <h5 class="card-title">Add to Cart</h5>
                                <form id="add-to-cart-form">
                                    <div class="row align-items-end">
                                        <div class="col-md-4">
                                            <label for="quantity" class="form-label">Quantity</label>
                                            <div class="input-group">
                                                <button type="button" class="btn btn-outline-secondary" onclick="decreaseQuantity()">
                                                    <i class="bi bi-dash"></i>
                                                </button>
                                                <input type="number" id="quantity" class="form-control text-center" value="1" min="1" max="10">
                                                <button type="button" class="btn btn-outline-secondary" onclick="increaseQuantity()">
                                                    <i class="bi bi-plus"></i>
                                                </button>
                                            </div>
                                        </div>
                                        <div class="col-md-8">
                                            <button type="button" class="btn btn-primary btn-lg w-100" onclick="addToCart(@Model.Id)">
                                                <i class="bi bi-cart-plus"></i> Add to Cart
                                            </button>
                                        </div>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="mt-auto">
                        <div class="alert alert-warning">
                            <i class="bi bi-exclamation-triangle"></i>
                            This item is currently out of stock.
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="row mt-5">
        <div class="col-12">
            <div class="text-center">
                <a asp-action="Index" class="btn btn-outline-primary">
                    <i class="bi bi-arrow-left"></i> Back to Menu
                </a>
                <a asp-action="Index" asp-controller="Cart" class="btn btn-primary">
                    <i class="bi bi-cart"></i> View Cart
                </a>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function increaseQuantity() {
            const quantityInput = document.getElementById('quantity');
            const currentValue = parseInt(quantityInput.value);
            if (currentValue < 10) {
                quantityInput.value = currentValue + 1;
            }
        }

        function decreaseQuantity() {
            const quantityInput = document.getElementById('quantity');
            const currentValue = parseInt(quantityInput.value);
            if (currentValue > 1) {
                quantityInput.value = currentValue - 1;
            }
        }

        function addToCart(productId) {
            const quantity = document.getElementById('quantity').value;
            
            fetch('/Cart/AddToCart', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                },
                body: JSON.stringify({
                    productId: productId,
                    quantity: parseInt(quantity)
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Show success message
                    showToast('Product added to cart successfully!', 'success');
                    // Update cart count if exists
                    updateCartCount();
                } else {
                    showToast('Failed to add product to cart.', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('An error occurred while adding to cart.', 'error');
            });
        }

        function showToast(message, type) {
            // Simple toast notification
            const toast = document.createElement('div');
            toast.className = `alert alert-${type === 'success' ? 'success' : 'danger'} position-fixed`;
            toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            toast.innerHTML = `
                <i class="bi bi-${type === 'success' ? 'check-circle' : 'exclamation-triangle'}"></i>
                ${message}
                <button type="button" class="btn-close" onclick="this.parentElement.remove()"></button>
            `;
            document.body.appendChild(toast);
            
            // Auto remove after 3 seconds
            setTimeout(() => {
                if (toast.parentElement) {
                    toast.remove();
                }
            }, 3000);
        }

        function updateCartCount() {
            // Update cart count in navigation if exists
            fetch('/Cart/GetCartCount')
                .then(response => response.json())
                .then(data => {
                    const cartCountElement = document.querySelector('.cart-count');
                    if (cartCountElement) {
                        cartCountElement.textContent = data.count;
                    }
                });
        }
    </script>
}
